
GraphPointer(
  child: StackLayout(
    children: [
      Drawer(
        viewFactory: <Function>
        model: Model(
          source: Filter.to2DPlan(
            xLabel: "date",
            yLabel: "mid"
            source: Filter.JsonExtract(
              fields: "data.getCandles"
              source: <Stream>
            )
          )
        )
        child: DataEventListener()
      )
    ]
  )
)


Model {
  input: JSON
  Model(inputs) {
    for(input in inputs) {
      input
    }
  }
}


Controller {
  factory: Function
  coordSys: CoordSystem
  model: Model
  window: Window
  
  Controller(this.model, this.coordSys, this.factory):  {}

  draw(event) {
    
    children.empty()
    for(jsonData in windows.ietrator) {
      geometry = factory(jsonData)
      children.add(geometry)
      geometryEvent = makeEvent(event, data)
      geometry.draw(geometryEvent)
    } 
  }

  getWindows(CoordSystem) {
    count = coordsys.x.dataCount
    from = coordSys.x.max
    
  }

  Window {
    model: Model
    coordSys: CoordSystem
    iterator: Iterator<Data2D>

    Window(this.model, this.coordSys) {
      resolution = coordSys.x.resolution
      lastestData = coordSys.x.max
      iterator = model.getXfrom(lastestData, resolution)
    }
  }

  makeEvent(event, data) {
    
  }
}

Candlestick {
  date: double
  open, high, low, close: double
  draw(event) {
    openPosition = Offset(date, open)
    closePosition = Offset(date, close)
    sidePosition = event.distance
    event.dataCanvas.drawRect(openPosition)
  }

  isHit() {
   // calculation 
  }
}

VirtualCanvas {
  center: double
  coordSys: CoordSystem
  canvas: canvas

  drawRect(top, bottom, width) {
    pixelTop = coordSys.yAxis.toPixel(top);
    pixelBottom = coordSys.yAxis.toPixel(bottom);
    pixelLeft = center - width / 2
    pixelRight = center + width / 2
    canvas.drawRRect(pixelLeft, pixelRight, pixelTop, pixelBottom)
  }
}

Axis {
  Range pixels, virtuals
  Axis(this.pixels, this.virtuals);
  toPixel(value) {
    return value * pixels.max / virtuals.max
  }
}

CoordSystem {
  Axis x, y 
  CoordSystem(drawZone, dataStat) {
    
  }
}


