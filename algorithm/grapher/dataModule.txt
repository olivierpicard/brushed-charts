GraphPointer(
  JsonDiffusion(
    stream: <Stream<Map>>
    child: StackLayout(
      children: [
        JsonFilter.extract(
          option: "data.getCanles",
          child: JsonFilter.explode(
            child: JsonFilter.toTimeSeries2D(
              child: Model(
                child: Drawer(
                  factory: <void Function()>
                  child: null
                )
              )
            )
          )
        )
      ]
    )
  )
)

Drawer extends Drawable (
  const X_SEGMENT_LENGTH = 10;
  final model
  factory: Function
  Drawer() {
    eventRegistry.add(ModelEvent => initModel)
  }
  
  void Draw(drawEvent event) {
    getLast from model
    xOffset = X_SEGMENT_LENGTH / 2
    children.empty()
    while(last.previous != null) {
      canvas.scale(Offset(1, getYScale()));
      drawSegment = DrawSegment(X_SEGMENT_LENGTH, xCursor, event)
      final geometry = factory
      geometry.handle(drawSegment)
      children.add(geometry);
      last = last.previous
    }
  }
)

Window extends Drawable {
  model
  Window() {
      eventRegistry.add(Model, onModel)
  }

  onModel(ModelEvent event) {
    model = event.model;
    
  }

  void draw(DrawEvent event) {
    super.draw(event);
  }
}